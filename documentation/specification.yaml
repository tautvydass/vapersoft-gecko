openapi: 3.0.1
info:
  title: Gecko by Vapersoft
  description: Internal business trip management system by Vapersoft.
  contact:
    email: tautvydas.stukenas@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
paths:
  /user:
    get:
      description: Get user by access token.
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: TBD
    put:
      description: Register new user.
      requestBody:
        content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        '201':
          description: Created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: TBD
  /user/{id}:
    post:
      description: Check if user is available at given period.
      parameters:
        - name: access-token
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Period'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: boolean
        '400':
          description: TBD
  /user/login:
    post:
      description: Login with given credentials.
      requestBody:
        content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: TBD
  /trip:
    get:
      description: Get all trips associated with user.
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: TBD
  /trip/{id}:
    get:
      description: Get trip by id.
      parameters:
      - name: access-token
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Trip'
        '400':
          description: TBD
  /office:
    get:
      description: Get all offices.
      parameters:
        - name: access-token
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Office'
        '400':
          description: TBD
  /office/{id}:
    get:
      description: Get office by id.
      parameters:
        - name: access-token
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Office'
        '400':
          description: TBD
  /houseroom/{officeId}:
    post:
      description: Get available office houserooms at period.
      parameters:
        - name: access-token
          in: header
          required: true
          schema:
            type: string
        - name: officeId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Period'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Houseroom'
        '400':
          description: TBD
  /group-trip:
    get:
      description: Get all group trips associated with user (don't include user trips).
      parameters:
        - name: access-token
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupTrip'
        '400':
          description: TBD
    put:
      description: Create new group trip (massive validation in backend).
      parameters:
        - name: access-token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupTrip'
        required: true
      responses:
        '201':
          description: Created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupTrip'
        '400':
          description: TBD
  /group-trip/{id}:
    get:
      description: Get group trip by id.
      parameters:
        - name: access-token
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Office'
        '400':
          description: TBD
    patch:
      description: Update group trip (massive validation in backend).
      parameters:
        - name: access-token
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupTrip'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: TBD
components:
  schemas:
    Trip:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - pending
          - approved
          - archived
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        houserooms:
          type: array
          items:
            $ref: '#/components/schemas/HouseroomOccupation'
        tripDetails:
          type: object
          example:
            $ref: '#/components/schemas/GroupTrip'
    GroupTrip:
      type: object
      properties:
        id:
          type: integer
          format: int64
        officeFrom:
          type: object
          example:
            $ref: '#/components/schemas/Office'
        officeTo:
          type: object
          example:
            $ref: '#/components/schemas/Office'
        dateFrom:
          type: string
          format: date
        dateTo:
          type: string
          format: date
        status:
          type: string
          enum:
          - pending
          - approved
          - archived
        userTrips:
          type: array
          items:
            $ref: '#/components/schemas/Trip'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fullname:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
          - default
          - advisor
        trips:
          type: array
          items:
            $ref: '#/components/schemas/Trip'
    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          description: md5 encoded (or other encoding)
    NewUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          description: md5 encoded (or other encoding)
        fullname:
          type: string
        email:
          type: string
          format: email
    Office:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        houserooms:
          type: array
          items:
            $ref: '#/components/schemas/Houseroom'
    Houseroom:
      type: object
      properties:
        id:
          type: integer
        officeId:
          type: integer
        name:
          type: string
    Period:
      type: object
      properties:
        from:
          type: string
          format: date
        to:
          type: string
          format: date
    Document:
      type: object
      properties:
        id:
          type: integer
          format: int64
        documentType:
          type: string
          enum:
          - ticket
          - hotelReservation
        status:
          type: string
          enum:
          - pending
          - approved
        json:
          type: string
          description: Serialized information about the document (json).
    HouseroomOccupation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        houseroom:
          type: object
          example:
            $ref: '#/components/schemas/Houseroom'
        dateFrom:
          type: string
          format: date
        dateTo:
          type: string
          format: date
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          type: object
          example:
            $ref: '#/components/schemas/User'
        text:
          type: string
        date:
          type: string
          format: date